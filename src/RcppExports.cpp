// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// asCharTime
std::vector<std::string> asCharTime(NumericVector x);
RcppExport SEXP rcsv_asCharTime(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(asCharTime(x));
    return rcpp_result_gen;
END_RCPP
}
// toTimeDay
NumericVector toTimeDay(CharacterVector x);
RcppExport SEXP rcsv_toTimeDay(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTimeDay(x));
    return rcpp_result_gen;
END_RCPP
}
// toTimeSec
NumericVector toTimeSec(CharacterVector x);
RcppExport SEXP rcsv_toTimeSec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTimeSec(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"rcsv_asCharTime", (DL_FUNC) &rcsv_asCharTime, 1},
    {"rcsv_toTimeDay", (DL_FUNC) &rcsv_toTimeDay, 1},
    {"rcsv_toTimeSec", (DL_FUNC) &rcsv_toTimeSec, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcsv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
